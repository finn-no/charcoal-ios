#!/usr/bin/env ruby

require "time"
require "fileutils"
require "digest/md5"

PREFIX = "FINAsset"
SUFFIX = "ImageName"

input = [ "FINN/Images.xcassets",
          "Resources/MarketIcons.xcassets",
          "Resources/TabbarIcons.xcassets"
]
output_filename = ARGV[0]
output_path = File.join(File.dirname(__FILE__), "..",  "Classes")

temp_path = "/tmp/"

asset_folders = input.map do |name|
  unless File.extname(name) == ".xcassets"
    $stderr.puts "Only .xcassets bundles are supported"
  end
  name
end

names  = []
asset_folders.each do |folder|
  names += Dir.glob(File.join(folder, "/*")).select{|f| File.extname(f) == ".imageset" }.map{|f| File.basename(f, ".*") }
end

names = names.sort

prelude = "// Generated by #{File.basename(__FILE__)} as a \"Run Script\" Build Phase\n"
prelude << "// WARNING: This file is autogenerated, do not modify by hand\n\n"

# objc
File.open(File.join(temp_path, "FIN#{output_filename}.h"), "w") do |f|
  f.puts prelude
  f.puts "@import Foundation;\n\n"
  names.each do |name|
    f.puts "extern NSString *const #{PREFIX + name + SUFFIX};\n"
  end
end
File.open(File.join(temp_path, "FIN#{output_filename}.m"), "w") do |f|
  f.puts prelude
  f.puts "#import \"FIN#{output_filename}.h\"\n\n"
  names.each do |name|
    f.puts "NSString *const #{PREFIX + name + SUFFIX} = @\"#{name}\";\n"
  end
end

# swift

File.open(File.join(temp_path, "#{output_filename}.swift"), "w") do |f|
  f.puts prelude
  f.puts <<EOS
import UIKit

extension UIImage {
    convenience init(named imageAsset: ImageAsset) {
        self.init(named: imageAsset.rawValue)!
    }
}

enum ImageAsset: String {
EOS
  names.each do |name|
    casename = name.dup
    casename[0] = casename[0].downcase
    if name == casename
      f.puts "    case #{casename}\n"
    else
      f.puts "    case #{casename} = \"#{name}\"\n"
    end
  end
  f.puts "}"

end

swiftNewDigest = Digest::MD5.hexdigest(File.read(File.join(temp_path, "#{output_filename}.swift")))
swiftOldDigest = Digest::MD5.hexdigest(File.read(File.join(output_path, "#{output_filename}.swift")))

objcNewDigest = Digest::MD5.hexdigest(File.read(File.join(temp_path, "FIN#{output_filename}.m")))
objcOldDigest = Digest::MD5.hexdigest(File.read(File.join(output_path, "FIN#{output_filename}.m")))

objcHeaderNewDigest = Digest::MD5.hexdigest(File.read(File.join(temp_path, "FIN#{output_filename}.h")))
objcHeaderOldDigest = Digest::MD5.hexdigest(File.read(File.join(output_path, "FIN#{output_filename}.h")))

if swiftNewDigest.eql? swiftOldDigest and objcNewDigest.eql? objcOldDigest and objcHeaderNewDigest.eql? objcHeaderOldDigest
  # No files replaced
else
  FileUtils.cp_r(File.join(temp_path, "#{output_filename}.swift"), File.join(output_path, "#{output_filename}.swift"), { remove_destination: true })
  FileUtils.cp_r(File.join(temp_path, "FIN#{output_filename}.h"), File.join(output_path, "FIN#{output_filename}.h"), { remove_destination: true })
  FileUtils.cp_r(File.join(temp_path, "FIN#{output_filename}.m"), File.join(output_path, "FIN#{output_filename}.m"), { remove_destination: true })
end

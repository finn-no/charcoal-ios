#!/usr/bin/env ruby

require "time"
require "fileutils"
require "digest/md5"

input = ["Sources/Resources/Assets.xcassets"]
output_filename = ARGV[0]
output_path = File.join(File.dirname(__FILE__), "..",  "Sources", "Resources")

temp_path = "/tmp/"

asset_folders = input.map do |name|
  unless File.extname(name) == ".xcassets"
    $stderr.puts "Only .xcassets bundles are supported"
  end
  name
end

names  = []
asset_folders.each do |folder|
  names += Dir.glob(File.join(folder, "/*")).select{|f| File.extname(f) == ".imageset" }.map{|f| File.basename(f, ".*") }
end

names = names.sort

prelude = "//\n"
prelude << "//  Copyright Â© FINN.no AS, Inc. All rights reserved.\n"
prelude << "//\n"
prelude << "\n"
prelude << "// Generated by #{File.basename(__FILE__)} as a \"Run Script\" Build Phase\n"
prelude << "// WARNING: This file is autogenerated, do not modify by hand\n\n"

File.open(File.join(temp_path, "#{output_filename}.swift"), "w") do |f|
  f.puts prelude
  f.puts <<EOS
import UIKit

extension UIImage {
    convenience init(named imageAsset: ImageAsset, in bundle: Bundle? = nil, compatibleWith traitCollection: UITraitCollection? = nil) {
        self.init(named: imageAsset.rawValue, in: bundle, compatibleWith: traitCollection)!
    }
}

enum ImageAsset: String {
EOS
  names.each do |name|
    casename = name.dup
    casename[0] = casename[0].downcase
    if name == casename
      f.puts "    case #{casename}\n"
    else
      f.puts "    case #{casename} = \"#{name}\"\n"
    end
  end
  f.puts "}"

end

swiftNewDigest = Digest::MD5.hexdigest(File.read(File.join(temp_path, "#{output_filename}.swift")))
swiftOldDigest = Digest::MD5.hexdigest(File.read(File.join(output_path, "#{output_filename}.swift")))

if swiftNewDigest.eql? swiftOldDigest
  # No files replaced
else
  FileUtils.cp_r(File.join(temp_path, "#{output_filename}.swift"), File.join(output_path, "#{output_filename}.swift"), { remove_destination: true })
end
